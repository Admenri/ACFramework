#ifndef ACF_TYPES_H_
#define ACF_TYPES_H_

#include "include/internal/acf_string.h"
#include "include/internal/acf_enums.h"
#include <wtypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/// Environment create params
///
typedef struct _acf_environment_settings_t {
  ///
  /// Size of this structure.
  ///
  size_t size;

  /// Pass the command line to the new process
  acf_string_t command_line;

  /// The chromium's cache & userdata dir
  acf_string_t user_data_dir;
} acf_environment_settings_t;

/// Browser create params
///
typedef struct _acf_browser_create_params_t {
  ///
  /// Size of this structure.
  ///
  size_t size;

  /// Parent window, if nullptr the browser will show with popup.
  HWND parent;

  /// initial window visible
  bool visible;

  /// pos & size in parent
  int x;
  int y;
  int width;
  int height;
} acf_browser_create_params_t;

///
/// Structure representing mouse event information.
///
typedef struct _acf_mouse_event_t {
  ///
  /// X coordinate relative to the left side of the view.
  ///
  int x;

  ///
  /// Y coordinate relative to the top side of the view.
  ///
  int y;

  ///
  /// Bit flags describing any pressed modifier keys. See
  /// cef_event_flags_t for values.
  ///
  uint32 modifiers;
} acf_mouse_event_t;

///
/// Key event types.
///
typedef enum {
  ///
  /// Notification that a key transitioned from "up" to "down".
  ///
  KEYEVENT_RAWKEYDOWN = 0,

  ///
  /// Notification that a key was pressed. This does not necessarily correspond
  /// to a character depending on the key and language. Use KEYEVENT_CHAR for
  /// character input.
  ///
  KEYEVENT_KEYDOWN,

  ///
  /// Notification that a key was released.
  ///
  KEYEVENT_KEYUP,

  ///
  /// Notification that a character was typed. Use this for text input. Key
  /// down events may generate 0, 1, or more than one character event depending
  /// on the key, locale, and operating system.
  ///
  KEYEVENT_CHAR
} acf_key_event_type_t;

///
/// Structure representing keyboard event information.
///
typedef struct _acf_key_event_t {
  ///
  /// The type of keyboard event.
  ///
  acf_key_event_type_t type;

  ///
  /// Bit flags describing any pressed modifier keys. See
  /// cef_event_flags_t for values.
  ///
  uint32 modifiers;

  ///
  /// The Windows key code for the key event. This value is used by the DOM
  /// specification. Sometimes it comes directly from the event (i.e. on
  /// Windows) and sometimes it's determined using a mapping function. See
  /// WebCore/platform/chromium/KeyboardCodes.h for the list of values.
  ///
  int windows_key_code;

  ///
  /// The actual key code genenerated by the platform.
  ///
  int native_key_code;

  ///
  /// Indicates whether the event is considered a "system key" event (see
  /// http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
  /// This value will always be false on non-Windows platforms.
  ///
  int is_system_key;

  ///
  /// The character generated by the keystroke.
  ///
  char16 character;

  ///
  /// Same as |character| but unmodified by any concurrently-held modifiers
  /// (except shift). This is useful for working out shortcut keys.
  ///
  char16 unmodified_character;

  ///
  /// True if the focus is currently on an editable field on the page. This is
  /// useful for determining if standard key events should be intercepted.
  ///
  int focus_on_editable_field;
} acf_key_event_t;

#ifdef __cplusplus
}
#endif

#endif