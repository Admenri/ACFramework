// Copyright (c) 2023 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=55022b4976e6db7ea3bf2ddd3104bae26afdcdf7$
//

#ifndef ACF_INCLUDE_CAPI_ACF_ENVIRONMENT_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_ENVIRONMENT_CAPI_H_
#pragma once

#include "include/capi/acf_browser_capi.h"
#include "include/capi/acf_profile_capi.h"
#include "include/internal/acf_def.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string.h"
#include "include/internal/acf_types_wrappers.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_browser_handler_t;
struct _acf_browser_t;
struct _acf_environment_t;
struct _acf_profile_handler_t;
struct _acf_profile_t;

///
/// Environment event handler
///
typedef struct _acf_environment_handler_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// called when the environment has been initialized
  ///
  void(ACF_CALLBACK* on_environment_initialized)(
      struct _acf_environment_handler_t* self,
      struct _acf_environment_t* env);

  ///
  /// called before environment destroyed
  ///
  void(ACF_CALLBACK* on_environment_destroyed)(
      struct _acf_environment_handler_t* self,
      struct _acf_environment_t* env);
} acf_environment_handler_t;

///
/// ACF's environment which host a browser environment. A user data dir can
/// create a environment, Do not create environment on the same user data dir.
///
typedef struct _acf_environment_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Is same object
  ///
  int(ACF_CALLBACK* is_same)(struct _acf_environment_t* self,
                             struct _acf_environment_t* that);

  ///
  /// Get object remote ready
  ///
  int(ACF_CALLBACK* is_valid)(struct _acf_environment_t* self);

  ///
  /// Get Client Handler
  ///
  struct _acf_environment_handler_t*(ACF_CALLBACK* get_handler)(
      struct _acf_environment_t* self);

  ///
  /// Get ACF Components version
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_browser_version)(
      struct _acf_environment_t* self);

  ///
  /// Get Browser Process PID
  ///
  uint32(ACF_CALLBACK* get_process_pid)(struct _acf_environment_t* self);

  ///
  /// Quit and wait for browser process return process exit code
  ///
  int(ACF_CALLBACK* terminate)(struct _acf_environment_t* self);

  ///
  /// Get default profile
  ///
  struct _acf_profile_t*(ACF_CALLBACK* get_default_profile)(
      struct _acf_environment_t* self);

  ///
  /// Create a profile hosted a user profile each path could only create a
  /// profile
  ///
  struct _acf_profile_t*(ACF_CALLBACK* create_profile)(
      struct _acf_environment_t* self,
      const acf_string_t* path,
      struct _acf_profile_handler_t* handler);

  ///
  /// Create browser from environment (async) return object immediately but the
  /// object was invalid.
  ///
  struct _acf_browser_t*(ACF_CALLBACK* create_browser)(
      struct _acf_environment_t* self,
      struct _acf_profile_t* profile,
      struct _acf_browser_handler_t* handler,
      const struct _acf_browser_create_params_t* params,
      acf_user_data_t user_data);
} acf_environment_t;

///
/// Init the acf context, this function must be called before any acf operation.
/// Method will create a thread to process the ipc message.
///
ACF_EXPORT int acf_environment_init_acfcontext(void);

///
/// Quit the acf context, call the function will destroy the connection with the
/// browser.
///
ACF_EXPORT int acf_environment_quit_acfcontext(void);

///
/// Create new environment on target user data dir
///
ACF_EXPORT acf_environment_t* acf_environment_create(
    const acf_string_t* browser_path,
    const struct _acf_environment_settings_t* settings,
    acf_environment_handler_t* handler);

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_ENVIRONMENT_CAPI_H_
