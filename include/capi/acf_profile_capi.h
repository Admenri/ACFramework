// Copyright (c) 2023 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=ee4fd5053b3947e5d74f3303aea245cc85830057$
//

#ifndef ACF_INCLUDE_CAPI_ACF_PROFILE_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_PROFILE_CAPI_H_
#pragma once

#include "include/capi/acf_callback_capi.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string.h"
#include "include/internal/acf_types.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_complete_handler_t;
struct _acf_profile_handler_t;
struct _acf_profile_t;

///
/// Profile handler
///
typedef struct _acf_profile_handler_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Called on profile created on remote, maybe created with failed.
  ///
  void(ACF_CALLBACK* on_profile_created)(struct _acf_profile_handler_t* self,
                                         struct _acf_profile_t* profile);

  ///
  /// Called when profile destroyed
  ///
  void(ACF_CALLBACK* on_profile_destroyed)(struct _acf_profile_handler_t* self,
                                           struct _acf_profile_t* profile);
} acf_profile_handler_t;

///
/// ACF's profile object for create browser in environment. In chromium, it is
/// user profile
///
typedef struct _acf_profile_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Get event handler
  ///
  struct _acf_profile_handler_t*(ACF_CALLBACK* get_handler)(
      struct _acf_profile_t* self);

  ///
  /// Get object remote state
  ///
  int(ACF_CALLBACK* is_valid)(struct _acf_profile_t* self);

  ///
  /// Get profile storage path
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_path)(struct _acf_profile_t* self);

  ///
  /// Remove browsing data when running profile, when completed it will call
  /// OnProfileRemoveDataCompleted
  ///
  void(ACF_CALLBACK* remove_browsing_data)(
      struct _acf_profile_t* self,
      acf_remove_data_type_t data_type,
      int no_checks,
      struct _acf_complete_handler_t* handler);
} acf_profile_t;

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_PROFILE_CAPI_H_
