// Copyright (c) 2023 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=634ea1a26f7d11428220c35c15d653cd8ed0c047$
//

#ifndef ACF_INCLUDE_CAPI_ACF_BROWSER_HANDLER_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_BROWSER_HANDLER_CAPI_H_
#pragma once

#include "include/capi/acf_browser_capi.h"
#include "include/capi/acf_context_menu_capi.h"
#include "include/capi/acf_environment_capi.h"
#include "include/capi/acf_frame_capi.h"
#include "include/capi/acf_values_capi.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_types.h"

#ifdef __cplusplus
extern "C" {
#endif

///
/// Browser event list handler model
///
typedef struct _acf_browser_handler_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Called when browser has been initialized from environment.
  ///
  void(ACF_CALLBACK* on_browser_created)(struct _acf_browser_handler_t* self,
                                         struct _acf_browser_t* browser);

  ///
  /// The browser will open a new Browser as NewWindow
  ///
  void(ACF_CALLBACK* on_new_window_request)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      acf_new_window_source_t source,
      acf_new_window_disposition_t disposition,
      int user_gesture,
      struct _acf_new_window_delegate_t* delegate);

  ///
  /// When the browser was sured to be destroyed, the browser will call this
  /// event.
  ///
  void(ACF_CALLBACK* on_browser_destroyed)(struct _acf_browser_handler_t* self,
                                           struct _acf_browser_t* browser);

  ///
  /// Loading state changed (async)
  ///
  void(ACF_CALLBACK* on_loading_state_changed)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      int show_loading_ui);

  ///
  /// Navigation state changed (title url icon historical)
  ///
  void(ACF_CALLBACK* on_navigation_state_changed)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      acf_navigation_types_t flags);

  ///
  /// Title bar info changed
  ///
  void(ACF_CALLBACK* on_title_changed)(struct _acf_browser_handler_t* self,
                                       struct _acf_browser_t* browser,
                                       const acf_string_t* title);

  ///
  /// Address bar info changed
  ///
  void(ACF_CALLBACK* on_address_changed)(struct _acf_browser_handler_t* self,
                                         struct _acf_browser_t* browser,
                                         const acf_string_t* address);

  ///
  /// notify fullscreen state changed
  ///
  void(ACF_CALLBACK* on_fullscreen_state_changed)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      int fullscreen);

  ///
  /// network need auth request
  ///
  void(ACF_CALLBACK* on_auth_login_request)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      int is_proxy,
      const acf_string_t* url,
      const acf_string_t* scheme,
      const acf_string_t* realm,
      const acf_string_t* challenge,
      int is_main_frame,
      struct _acf_login_delegate_t* delegate);

  ///
  /// Context menu request, return true (1) for blocking menu popup
  ///
  void(ACF_CALLBACK* on_context_menu_request)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      struct _acf_context_menu_params_t* menu_params,
      struct _acf_context_menu_model_t* menu_model,
      struct _acf_context_menu_callback_t* callback);

  ///
  /// Context menu request to execute |command_id| associate item command.
  ///
  void(ACF_CALLBACK* on_context_menu_execute)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      struct _acf_context_menu_params_t* menu_params,
      int command_id,
      int event_flags);

  ///
  /// Load start notify
  ///
  void(ACF_CALLBACK* on_load_start)(struct _acf_browser_handler_t* self,
                                    struct _acf_browser_t* browser,
                                    struct _acf_frame_t* frame,
                                    int transition);

  ///
  /// Load end notify
  ///
  void(ACF_CALLBACK* on_load_end)(struct _acf_browser_handler_t* self,
                                  struct _acf_browser_t* browser,
                                  struct _acf_frame_t* frame,
                                  const acf_string_t* url,
                                  int http_status_code);

  ///
  /// Load error notify
  ///
  void(ACF_CALLBACK* on_load_error)(struct _acf_browser_handler_t* self,
                                    struct _acf_browser_t* browser,
                                    struct _acf_frame_t* frame,
                                    const acf_string_t* url,
                                    int error_code);

  ///
  /// Called when the page icon changes.
  ///
  void(ACF_CALLBACK* on_favicon_urlchange)(struct _acf_browser_handler_t* self,
                                           struct _acf_browser_t* browser,
                                           acf_string_list_t icon_urls);

  ///
  /// Called to display a console message.
  ///
  void(ACF_CALLBACK* on_console_message)(struct _acf_browser_handler_t* self,
                                         struct _acf_browser_t* browser,
                                         int level,
                                         const acf_string_t* message,
                                         const acf_string_t* source,
                                         int line,
                                         const acf_string_t* trace);

  ///
  /// Called when the overall page loading progress has changed. |progress|
  /// ranges from 0.0 to 1.0.
  ///
  void(ACF_CALLBACK* on_loading_progress_change)(
      struct _acf_browser_handler_t* self,
      struct _acf_browser_t* browser,
      double progress);

  ///
  /// Called when audible state was changed.
  ///
  void(ACF_CALLBACK* on_audio_state_change)(struct _acf_browser_handler_t* self,
                                            struct _acf_browser_t* browser,
                                            int audible);

  ///
  /// Called when muted state was changed.
  ///
  void(ACF_CALLBACK* did_mute_state_update)(struct _acf_browser_handler_t* self,
                                            struct _acf_browser_t* browser,
                                            int muted);
} acf_browser_handler_t;

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_BROWSER_HANDLER_CAPI_H_
