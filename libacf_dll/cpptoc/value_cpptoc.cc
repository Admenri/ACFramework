// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=fa7421709d1ac534eb7cfbdb1618adea40cb2481$
//

#include "libacf_dll/cpptoc/value_cpptoc.h"
#include "libacf_dll/cpptoc/binary_value_cpptoc.h"
#include "libacf_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libacf_dll/cpptoc/list_value_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

ACF_EXPORT acf_value_t* acf_value_create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  AcfRefPtr<AcfValue> _retval = AcfValue::Create();

  // Return type: refptr_same
  return AcfValueCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK value_is_valid(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_is_owned(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->IsOwned();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_is_read_only(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_is_same(struct _acf_value_t* self,
                               struct _acf_value_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  if (!that)
    return 0;

  // Execute
  bool _retval =
      AcfValueCppToC::Get(self)->IsSame(AcfValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_is_equal(struct _acf_value_t* self,
                                struct _acf_value_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  if (!that)
    return 0;

  // Execute
  bool _retval =
      AcfValueCppToC::Get(self)->IsEqual(AcfValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _acf_value_t* ACF_CALLBACK value_copy(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfValue> _retval = AcfValueCppToC::Get(self)->Copy();

  // Return type: refptr_same
  return AcfValueCppToC::Wrap(_retval);
}

acf_value_type_t ACF_CALLBACK value_get_type(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return VTYPE_INVALID;

  // Execute
  acf_value_type_t _retval = AcfValueCppToC::Get(self)->GetType();

  // Return type: simple
  return _retval;
}

int ACF_CALLBACK value_get_bool(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->GetBool();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_get_int(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  int _retval = AcfValueCppToC::Get(self)->GetInt();

  // Return type: simple
  return _retval;
}

double ACF_CALLBACK value_get_double(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  double _retval = AcfValueCppToC::Get(self)->GetDouble();

  // Return type: simple
  return _retval;
}

acf_string_userfree_t ACF_CALLBACK value_get_string(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfValueCppToC::Get(self)->GetString();

  // Return type: string
  return _retval.DetachToUserFree();
}

struct _acf_binary_value_t* ACF_CALLBACK
value_get_binary(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfBinaryValue> _retval = AcfValueCppToC::Get(self)->GetBinary();

  // Return type: refptr_same
  return AcfBinaryValueCppToC::Wrap(_retval);
}

struct _acf_dictionary_value_t* ACF_CALLBACK
value_get_dictionary(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfDictionaryValue> _retval =
      AcfValueCppToC::Get(self)->GetDictionary();

  // Return type: refptr_same
  return AcfDictionaryValueCppToC::Wrap(_retval);
}

struct _acf_list_value_t* ACF_CALLBACK
value_get_list(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfListValue> _retval = AcfValueCppToC::Get(self)->GetList();

  // Return type: refptr_same
  return AcfListValueCppToC::Wrap(_retval);
}

int ACF_CALLBACK value_set_null(struct _acf_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->SetNull();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_set_bool(struct _acf_value_t* self, int value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->SetBool(value ? true : false);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_set_int(struct _acf_value_t* self, int value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->SetInt(value);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_set_double(struct _acf_value_t* self, double value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->SetDouble(value);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_set_string(struct _acf_value_t* self,
                                  const acf_string_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Unverified params: value

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->SetString(AcfString(value));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_set_binary(struct _acf_value_t* self,
                                  struct _acf_binary_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: value; type: refptr_same
  if (!value)
    return 0;

  // Execute
  bool _retval =
      AcfValueCppToC::Get(self)->SetBinary(AcfBinaryValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_set_dictionary(struct _acf_value_t* self,
                                      struct _acf_dictionary_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: value; type: refptr_same
  if (!value)
    return 0;

  // Execute
  bool _retval = AcfValueCppToC::Get(self)->SetDictionary(
      AcfDictionaryValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK value_set_list(struct _acf_value_t* self,
                                struct _acf_list_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: value; type: refptr_same
  if (!value)
    return 0;

  // Execute
  bool _retval =
      AcfValueCppToC::Get(self)->SetList(AcfListValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfValueCppToC::AcfValueCppToC() {
  GetStruct()->is_valid = value_is_valid;
  GetStruct()->is_owned = value_is_owned;
  GetStruct()->is_read_only = value_is_read_only;
  GetStruct()->is_same = value_is_same;
  GetStruct()->is_equal = value_is_equal;
  GetStruct()->copy = value_copy;
  GetStruct()->get_type = value_get_type;
  GetStruct()->get_bool = value_get_bool;
  GetStruct()->get_int = value_get_int;
  GetStruct()->get_double = value_get_double;
  GetStruct()->get_string = value_get_string;
  GetStruct()->get_binary = value_get_binary;
  GetStruct()->get_dictionary = value_get_dictionary;
  GetStruct()->get_list = value_get_list;
  GetStruct()->set_null = value_set_null;
  GetStruct()->set_bool = value_set_bool;
  GetStruct()->set_int = value_set_int;
  GetStruct()->set_double = value_set_double;
  GetStruct()->set_string = value_set_string;
  GetStruct()->set_binary = value_set_binary;
  GetStruct()->set_dictionary = value_set_dictionary;
  GetStruct()->set_list = value_set_list;
}

// DESTRUCTOR - Do not edit by hand.

AcfValueCppToC::~AcfValueCppToC() {}

template <>
AcfRefPtr<AcfValue>
AcfCppToCRefCounted<AcfValueCppToC, AcfValue, acf_value_t>::UnwrapDerived(
    AcfWrapperType type,
    acf_value_t* s) {
  return nullptr;
}

template <>
AcfWrapperType
    AcfCppToCRefCounted<AcfValueCppToC, AcfValue, acf_value_t>::kWrapperType =
        WT_VALUE;
