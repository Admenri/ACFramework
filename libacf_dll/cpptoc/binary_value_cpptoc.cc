// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=bf137222b0152658479ef7f9860e95558ef86a97$
//

#include "libacf_dll/cpptoc/binary_value_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

ACF_EXPORT acf_binary_value_t* acf_binary_value_create(const void* data,
                                                       size_t data_size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data; type: simple_byaddr
  if (!data)
    return NULL;

  // Execute
  AcfRefPtr<AcfBinaryValue> _retval = AcfBinaryValue::Create(data, data_size);

  // Return type: refptr_same
  return AcfBinaryValueCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK binary_value_is_valid(struct _acf_binary_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfBinaryValueCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK binary_value_is_owned(struct _acf_binary_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfBinaryValueCppToC::Get(self)->IsOwned();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK binary_value_is_same(struct _acf_binary_value_t* self,
                                      struct _acf_binary_value_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  if (!that)
    return 0;

  // Execute
  bool _retval = AcfBinaryValueCppToC::Get(self)->IsSame(
      AcfBinaryValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK binary_value_is_equal(struct _acf_binary_value_t* self,
                                       struct _acf_binary_value_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  if (!that)
    return 0;

  // Execute
  bool _retval = AcfBinaryValueCppToC::Get(self)->IsEqual(
      AcfBinaryValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _acf_binary_value_t* ACF_CALLBACK
binary_value_copy(struct _acf_binary_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfBinaryValue> _retval = AcfBinaryValueCppToC::Get(self)->Copy();

  // Return type: refptr_same
  return AcfBinaryValueCppToC::Wrap(_retval);
}

size_t ACF_CALLBACK binary_value_get_size(struct _acf_binary_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  size_t _retval = AcfBinaryValueCppToC::Get(self)->GetSize();

  // Return type: simple
  return _retval;
}

size_t ACF_CALLBACK binary_value_get_data(struct _acf_binary_value_t* self,
                                          void* buffer,
                                          size_t buffer_size,
                                          size_t data_offset) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: buffer; type: simple_byaddr
  if (!buffer)
    return 0;

  // Execute
  size_t _retval = AcfBinaryValueCppToC::Get(self)->GetData(buffer, buffer_size,
                                                            data_offset);

  // Return type: simple
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfBinaryValueCppToC::AcfBinaryValueCppToC() {
  GetStruct()->is_valid = binary_value_is_valid;
  GetStruct()->is_owned = binary_value_is_owned;
  GetStruct()->is_same = binary_value_is_same;
  GetStruct()->is_equal = binary_value_is_equal;
  GetStruct()->copy = binary_value_copy;
  GetStruct()->get_size = binary_value_get_size;
  GetStruct()->get_data = binary_value_get_data;
}

// DESTRUCTOR - Do not edit by hand.

AcfBinaryValueCppToC::~AcfBinaryValueCppToC() {}

template <>
AcfRefPtr<AcfBinaryValue>
AcfCppToCRefCounted<AcfBinaryValueCppToC, AcfBinaryValue, acf_binary_value_t>::
    UnwrapDerived(AcfWrapperType type, acf_binary_value_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfBinaryValueCppToC,
                                   AcfBinaryValue,
                                   acf_binary_value_t>::kWrapperType =
    WT_BINARY_VALUE;
