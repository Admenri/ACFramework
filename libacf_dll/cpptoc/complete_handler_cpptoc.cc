// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4770720bf8b5a8fa19a6eebef7ca2de6504cb325$
//

#include "libacf_dll/cpptoc/complete_handler_cpptoc.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK
complete_handler_on_complete(struct _acf_complete_handler_t* self,
                             int success) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfCompleteHandlerCppToC::Get(self)->OnComplete(success ? true : false);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfCompleteHandlerCppToC::AcfCompleteHandlerCppToC() {
  GetStruct()->on_complete = complete_handler_on_complete;
}

// DESTRUCTOR - Do not edit by hand.

AcfCompleteHandlerCppToC::~AcfCompleteHandlerCppToC() {}

template <>
AcfRefPtr<AcfCompleteHandler> AcfCppToCRefCounted<
    AcfCompleteHandlerCppToC,
    AcfCompleteHandler,
    acf_complete_handler_t>::UnwrapDerived(AcfWrapperType type,
                                           acf_complete_handler_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfCompleteHandlerCppToC,
                                   AcfCompleteHandler,
                                   acf_complete_handler_t>::kWrapperType =
    WT_COMPLETE_HANDLER;
