// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=b5dc722b241aef8b37cc35ed21c75c54ca895e8e$
//

#include "libacf_dll/cpptoc/callback_cpptoc.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK callback_cont(struct _acf_callback_t* self, int cancel) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfCallbackCppToC::Get(self)->Continue(cancel ? true : false);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfCallbackCppToC::AcfCallbackCppToC() {
  GetStruct()->cont = callback_cont;
}

// DESTRUCTOR - Do not edit by hand.

AcfCallbackCppToC::~AcfCallbackCppToC() {}

template <>
AcfRefPtr<AcfCallback>
AcfCppToCRefCounted<AcfCallbackCppToC, AcfCallback, acf_callback_t>::
    UnwrapDerived(AcfWrapperType type, acf_callback_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfCallbackCppToC,
                                   AcfCallback,
                                   acf_callback_t>::kWrapperType = WT_CALLBACK;
