// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=3efe621f20e09cfa380ed63153df4500b93a53de$
//

#include "libacf_dll/cpptoc/browser_cpptoc.h"
#include <algorithm>
#include "libacf_dll/cpptoc/environment_cpptoc.h"
#include "libacf_dll/cpptoc/frame_cpptoc.h"
#include "libacf_dll/cpptoc/profile_cpptoc.h"
#include "libacf_dll/ctocpp/browser_handler_ctocpp.h"
#include "libacf_dll/transfer_util.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK browser_is_same(struct _acf_browser_t* self,
                                 struct _acf_browser_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  if (!that)
    return 0;

  // Execute
  bool _retval =
      AcfBrowserCppToC::Get(self)->IsSame(AcfBrowserCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

acf_browser_handler_t* ACF_CALLBACK
browser_get_handler(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfBrowserHandler> _retval =
      AcfBrowserCppToC::Get(self)->GetHandler();

  // Return type: refptr_diff
  return AcfBrowserHandlerCToCpp::Unwrap(_retval);
}

acf_user_data_t ACF_CALLBACK
browser_get_user_data(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return nullptr;

  // Execute
  acf_user_data_t _retval = AcfBrowserCppToC::Get(self)->GetUserData();

  // Return type: simple
  return _retval;
}

struct _acf_environment_t* ACF_CALLBACK
browser_get_environment(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfEnvironment> _retval =
      AcfBrowserCppToC::Get(self)->GetEnvironment();

  // Return type: refptr_same
  return AcfEnvironmentCppToC::Wrap(_retval);
}

void ACF_CALLBACK browser_close(struct _acf_browser_t* self, int force) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->Close(force ? true : false);
}

acf_window_handle_t ACF_CALLBACK
browser_get_window_handle(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return nullptr;

  // Execute
  acf_window_handle_t _retval = AcfBrowserCppToC::Get(self)->GetWindowHandle();

  // Return type: simple
  return _retval;
}

int ACF_CALLBACK browser_is_valid(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfBrowserCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK browser_can_go_back(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfBrowserCppToC::Get(self)->CanGoBack();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK browser_can_go_forward(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfBrowserCppToC::Get(self)->CanGoForward();

  // Return type: bool
  return _retval;
}

void ACF_CALLBACK browser_go_back(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->GoBack();
}

void ACF_CALLBACK browser_go_forward(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->GoForward();
}

void ACF_CALLBACK browser_reload(struct _acf_browser_t* self,
                                 int ignore_cache) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->Reload(ignore_cache ? true : false);
}

void ACF_CALLBACK browser_stop(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->Stop();
}

int ACF_CALLBACK browser_is_loading(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfBrowserCppToC::Get(self)->IsLoading();

  // Return type: bool
  return _retval;
}

void ACF_CALLBACK browser_load_url(struct _acf_browser_t* self,
                                   const acf_string_t* url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: url; type: string_byref_const
  if (!url)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->LoadURL(AcfString(url));
}

acf_string_userfree_t ACF_CALLBACK
browser_get_url(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfBrowserCppToC::Get(self)->GetURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

acf_string_userfree_t ACF_CALLBACK
browser_get_title(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfBrowserCppToC::Get(self)->GetTitle();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK browser_focus(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->Focus();
}

void ACF_CALLBACK browser_set_visible(struct _acf_browser_t* self,
                                      int visible) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfBrowserCppToC::Get(self)->SetVisible(visible ? true : false);
}

int ACF_CALLBACK browser_get_visible(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfBrowserCppToC::Get(self)->GetVisible();

  // Return type: bool
  return _retval;
}

struct _acf_profile_t* ACF_CALLBACK
browser_get_profile(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfProfile> _retval = AcfBrowserCppToC::Get(self)->GetProfile();

  // Return type: refptr_same
  return AcfProfileCppToC::Wrap(_retval);
}

size_t ACF_CALLBACK browser_get_frame_count(struct _acf_browser_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  size_t _retval = AcfBrowserCppToC::Get(self)->GetFrameCount();

  // Return type: simple
  return _retval;
}

void ACF_CALLBACK browser_get_frame_identifiers(struct _acf_browser_t* self,
                                                size_t* identifiersCount,
                                                int64* identifiers) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: identifiers; type: simple_vec_byref
  if (!identifiersCount || (*identifiersCount > 0 && !identifiers))
    return;

  // Translate param: identifiers; type: simple_vec_byref
  std::vector<int64> identifiersList;
  if (identifiersCount && *identifiersCount > 0 && identifiers) {
    for (size_t i = 0; i < *identifiersCount; ++i) {
      identifiersList.push_back(identifiers[i]);
    }
  }

  // Execute
  AcfBrowserCppToC::Get(self)->GetFrameIdentifiers(identifiersList);

  // Restore param: identifiers; type: simple_vec_byref
  if (identifiersCount && identifiers) {
    *identifiersCount = std::min(identifiersList.size(), *identifiersCount);
    if (*identifiersCount > 0) {
      for (size_t i = 0; i < *identifiersCount; ++i) {
        identifiers[i] = identifiersList[i];
      }
    }
  }
}

void ACF_CALLBACK browser_get_frame_names(struct _acf_browser_t* self,
                                          acf_string_list_t names) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: names; type: string_vec_byref
  if (!names)
    return;

  // Translate param: names; type: string_vec_byref
  std::vector<AcfString> namesList;
  transfer_string_list_contents(names, namesList);

  // Execute
  AcfBrowserCppToC::Get(self)->GetFrameNames(namesList);

  // Restore param: names; type: string_vec_byref
  acf_string_list_clear(names);
  transfer_string_list_contents(namesList, names);
}

struct _acf_frame_t* ACF_CALLBACK
browser_get_frame_byident(struct _acf_browser_t* self, int64 identifier) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfFrame> _retval =
      AcfBrowserCppToC::Get(self)->GetFrame(identifier);

  // Return type: refptr_same
  return AcfFrameCppToC::Wrap(_retval);
}

struct _acf_frame_t* ACF_CALLBACK browser_get_frame(struct _acf_browser_t* self,
                                                    const acf_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;
  // Unverified params: name

  // Execute
  AcfRefPtr<AcfFrame> _retval =
      AcfBrowserCppToC::Get(self)->GetFrame(AcfString(name));

  // Return type: refptr_same
  return AcfFrameCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfBrowserCppToC::AcfBrowserCppToC() {
  GetStruct()->is_same = browser_is_same;
  GetStruct()->get_handler = browser_get_handler;
  GetStruct()->get_user_data = browser_get_user_data;
  GetStruct()->get_environment = browser_get_environment;
  GetStruct()->close = browser_close;
  GetStruct()->get_window_handle = browser_get_window_handle;
  GetStruct()->is_valid = browser_is_valid;
  GetStruct()->can_go_back = browser_can_go_back;
  GetStruct()->can_go_forward = browser_can_go_forward;
  GetStruct()->go_back = browser_go_back;
  GetStruct()->go_forward = browser_go_forward;
  GetStruct()->reload = browser_reload;
  GetStruct()->stop = browser_stop;
  GetStruct()->is_loading = browser_is_loading;
  GetStruct()->load_url = browser_load_url;
  GetStruct()->get_url = browser_get_url;
  GetStruct()->get_title = browser_get_title;
  GetStruct()->focus = browser_focus;
  GetStruct()->set_visible = browser_set_visible;
  GetStruct()->get_visible = browser_get_visible;
  GetStruct()->get_profile = browser_get_profile;
  GetStruct()->get_frame_count = browser_get_frame_count;
  GetStruct()->get_frame_identifiers = browser_get_frame_identifiers;
  GetStruct()->get_frame_names = browser_get_frame_names;
  GetStruct()->get_frame_byident = browser_get_frame_byident;
  GetStruct()->get_frame = browser_get_frame;
}

// DESTRUCTOR - Do not edit by hand.

AcfBrowserCppToC::~AcfBrowserCppToC() {}

template <>
AcfRefPtr<AcfBrowser>
AcfCppToCRefCounted<AcfBrowserCppToC, AcfBrowser, acf_browser_t>::UnwrapDerived(
    AcfWrapperType type,
    acf_browser_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfBrowserCppToC,
                                   AcfBrowser,
                                   acf_browser_t>::kWrapperType = WT_BROWSER;
