// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=421e7d84957a13deb5dff5e072c1386f6dd95255$
//

#include "libacf_dll/cpptoc/browser_handler_cpptoc.h"
#include "libacf_dll/ctocpp/browser_ctocpp.h"
#include "libacf_dll/ctocpp/new_window_delegate_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK
browser_handler_on_browser_created(struct _acf_browser_handler_t* self,
                                   struct _acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBrowserCreated(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK browser_handler_on_new_window_request(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    acf_new_window_source_t source,
    acf_new_window_disposition_t disposition,
    int user_gesture,
    struct _acf_new_window_delegate_t* delegate) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: delegate; type: refptr_diff
  if (!delegate)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnNewWindowRequest(
      AcfBrowserCToCpp::Wrap(browser), source, disposition,
      user_gesture ? true : false, AcfNewWindowDelegateCToCpp::Wrap(delegate));
}

void ACF_CALLBACK
browser_handler_on_browser_destroyed(struct _acf_browser_handler_t* self,
                                     struct _acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBrowserDestroyed(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK
browser_handler_on_loading_state_changed(struct _acf_browser_handler_t* self,
                                         struct _acf_browser_t* browser,
                                         int show_loading_ui) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadingStateChanged(
      AcfBrowserCToCpp::Wrap(browser), show_loading_ui ? true : false);
}

void ACF_CALLBACK
browser_handler_on_navigation_state_changed(struct _acf_browser_handler_t* self,
                                            struct _acf_browser_t* browser,
                                            acf_navigation_types_t flags) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnNavigationStateChanged(
      AcfBrowserCToCpp::Wrap(browser), flags);
}

void ACF_CALLBACK
browser_handler_on_title_changed(struct _acf_browser_handler_t* self,
                                 struct _acf_browser_t* browser,
                                 const acf_string_t* title) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: title; type: string_byref_const
  if (!title)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnTitleChanged(
      AcfBrowserCToCpp::Wrap(browser), AcfString(title));
}

void ACF_CALLBACK
browser_handler_on_address_changed(struct _acf_browser_handler_t* self,
                                   struct _acf_browser_t* browser,
                                   const acf_string_t* address) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: address; type: string_byref_const
  if (!address)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnAddressChanged(
      AcfBrowserCToCpp::Wrap(browser), AcfString(address));
}

void ACF_CALLBACK
browser_handler_on_fullscreen_state_changed(struct _acf_browser_handler_t* self,
                                            struct _acf_browser_t* browser,
                                            int fullscreen) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnFullscreenStateChanged(
      AcfBrowserCToCpp::Wrap(browser), fullscreen ? true : false);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCppToC::AcfBrowserHandlerCppToC() {
  GetStruct()->on_browser_created = browser_handler_on_browser_created;
  GetStruct()->on_new_window_request = browser_handler_on_new_window_request;
  GetStruct()->on_browser_destroyed = browser_handler_on_browser_destroyed;
  GetStruct()->on_loading_state_changed =
      browser_handler_on_loading_state_changed;
  GetStruct()->on_navigation_state_changed =
      browser_handler_on_navigation_state_changed;
  GetStruct()->on_title_changed = browser_handler_on_title_changed;
  GetStruct()->on_address_changed = browser_handler_on_address_changed;
  GetStruct()->on_fullscreen_state_changed =
      browser_handler_on_fullscreen_state_changed;
}

// DESTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCppToC::~AcfBrowserHandlerCppToC() {}

template <>
AcfRefPtr<AcfBrowserHandler> AcfCppToCRefCounted<
    AcfBrowserHandlerCppToC,
    AcfBrowserHandler,
    acf_browser_handler_t>::UnwrapDerived(AcfWrapperType type,
                                          acf_browser_handler_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfBrowserHandlerCppToC,
                                   AcfBrowserHandler,
                                   acf_browser_handler_t>::kWrapperType =
    WT_BROWSER_HANDLER;
