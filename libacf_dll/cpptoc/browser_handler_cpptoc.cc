// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=56ef62870887bf35bf82bd3ce260405ed6655ff2$
//

#include "libacf_dll/cpptoc/browser_handler_cpptoc.h"
#include "libacf_dll/ctocpp/browser_ctocpp.h"
#include "libacf_dll/ctocpp/callback_ctocpp.h"
#include "libacf_dll/ctocpp/context_menu_callback_ctocpp.h"
#include "libacf_dll/ctocpp/context_menu_model_ctocpp.h"
#include "libacf_dll/ctocpp/context_menu_params_ctocpp.h"
#include "libacf_dll/ctocpp/frame_ctocpp.h"
#include "libacf_dll/ctocpp/login_delegate_ctocpp.h"
#include "libacf_dll/ctocpp/new_window_delegate_ctocpp.h"
#include "libacf_dll/ctocpp/request_ctocpp.h"
#include "libacf_dll/transfer_util.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK
browser_handler_on_browser_created(struct _acf_browser_handler_t* self,
                                   acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBrowserCreated(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK
browser_handler_on_new_window_request(struct _acf_browser_handler_t* self,
                                      acf_browser_t* browser,
                                      acf_new_window_source_t source,
                                      acf_new_window_disposition_t disposition,
                                      int user_gesture,
                                      acf_new_window_delegate_t* delegate) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: delegate; type: refptr_diff
  if (!delegate)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnNewWindowRequest(
      AcfBrowserCToCpp::Wrap(browser), source, disposition,
      user_gesture ? true : false, AcfNewWindowDelegateCToCpp::Wrap(delegate));
}

void ACF_CALLBACK
browser_handler_on_browser_destroyed(struct _acf_browser_handler_t* self,
                                     acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBrowserDestroyed(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK
browser_handler_on_loading_state_changed(struct _acf_browser_handler_t* self,
                                         acf_browser_t* browser,
                                         int show_loading_ui) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadingStateChanged(
      AcfBrowserCToCpp::Wrap(browser), show_loading_ui ? true : false);
}

void ACF_CALLBACK
browser_handler_on_navigation_state_changed(struct _acf_browser_handler_t* self,
                                            acf_browser_t* browser,
                                            acf_navigation_types_t flags) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnNavigationStateChanged(
      AcfBrowserCToCpp::Wrap(browser), flags);
}

void ACF_CALLBACK
browser_handler_on_title_changed(struct _acf_browser_handler_t* self,
                                 acf_browser_t* browser,
                                 const acf_string_t* title) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Unverified params: title

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnTitleChanged(
      AcfBrowserCToCpp::Wrap(browser), AcfString(title));
}

void ACF_CALLBACK
browser_handler_on_address_changed(struct _acf_browser_handler_t* self,
                                   acf_browser_t* browser,
                                   const acf_string_t* address) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Unverified params: address

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnAddressChanged(
      AcfBrowserCToCpp::Wrap(browser), AcfString(address));
}

void ACF_CALLBACK
browser_handler_on_fullscreen_state_changed(struct _acf_browser_handler_t* self,
                                            acf_browser_t* browser,
                                            int fullscreen) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnFullscreenStateChanged(
      AcfBrowserCToCpp::Wrap(browser), fullscreen ? true : false);
}

void ACF_CALLBACK
browser_handler_on_auth_login_request(struct _acf_browser_handler_t* self,
                                      acf_browser_t* browser,
                                      int is_proxy,
                                      const acf_string_t* url,
                                      const acf_string_t* scheme,
                                      const acf_string_t* realm,
                                      const acf_string_t* challenge,
                                      int is_main_frame,
                                      acf_login_delegate_t* delegate) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: delegate; type: refptr_diff
  if (!delegate)
    return;
  // Unverified params: url, scheme, realm, challenge

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnAuthLoginRequest(
      AcfBrowserCToCpp::Wrap(browser), is_proxy ? true : false, AcfString(url),
      AcfString(scheme), AcfString(realm), AcfString(challenge),
      is_main_frame ? true : false, AcfLoginDelegateCToCpp::Wrap(delegate));
}

void ACF_CALLBACK browser_handler_on_context_menu_request(
    struct _acf_browser_handler_t* self,
    acf_browser_t* browser,
    struct _acf_context_menu_params_t* menu_params,
    struct _acf_context_menu_model_t* menu_model,
    acf_context_menu_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: menu_params; type: refptr_diff
  if (!menu_params)
    return;
  // Verify param: menu_model; type: refptr_diff
  if (!menu_model)
    return;
  // Verify param: callback; type: refptr_diff
  if (!callback)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnContextMenuRequest(
      AcfBrowserCToCpp::Wrap(browser),
      AcfContextMenuParamsCToCpp::Wrap(menu_params),
      AcfContextMenuModelCToCpp::Wrap(menu_model),
      AcfContextMenuCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK browser_handler_on_context_menu_execute(
    struct _acf_browser_handler_t* self,
    acf_browser_t* browser,
    struct _acf_context_menu_params_t* menu_params,
    int command_id,
    int event_flags) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: menu_params; type: refptr_diff
  if (!menu_params)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnContextMenuExecute(
      AcfBrowserCToCpp::Wrap(browser),
      AcfContextMenuParamsCToCpp::Wrap(menu_params), command_id, event_flags);
}

void ACF_CALLBACK
browser_handler_on_load_start(struct _acf_browser_handler_t* self,
                              acf_browser_t* browser,
                              struct _acf_frame_t* frame,
                              int transition) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: frame; type: refptr_diff
  if (!frame)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadStart(
      AcfBrowserCToCpp::Wrap(browser), AcfFrameCToCpp::Wrap(frame), transition);
}

void ACF_CALLBACK
browser_handler_on_load_end(struct _acf_browser_handler_t* self,
                            acf_browser_t* browser,
                            struct _acf_frame_t* frame,
                            const acf_string_t* url,
                            int http_status_code) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: frame; type: refptr_diff
  if (!frame)
    return;
  // Unverified params: url

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadEnd(
      AcfBrowserCToCpp::Wrap(browser), AcfFrameCToCpp::Wrap(frame),
      AcfString(url), http_status_code);
}

void ACF_CALLBACK
browser_handler_on_load_error(struct _acf_browser_handler_t* self,
                              acf_browser_t* browser,
                              struct _acf_frame_t* frame,
                              const acf_string_t* url,
                              int error_code) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: frame; type: refptr_diff
  if (!frame)
    return;
  // Unverified params: url

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadError(
      AcfBrowserCToCpp::Wrap(browser), AcfFrameCToCpp::Wrap(frame),
      AcfString(url), error_code);
}

void ACF_CALLBACK
browser_handler_on_favicon_urlchange(struct _acf_browser_handler_t* self,
                                     acf_browser_t* browser,
                                     acf_string_list_t icon_urls) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Unverified params: icon_urls

  // Translate param: icon_urls; type: string_vec_byref_const
  std::vector<AcfString> icon_urlsList;
  transfer_string_list_contents(icon_urls, icon_urlsList);

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnFaviconURLChange(
      AcfBrowserCToCpp::Wrap(browser), icon_urlsList);
}

void ACF_CALLBACK
browser_handler_on_console_message(struct _acf_browser_handler_t* self,
                                   acf_browser_t* browser,
                                   int level,
                                   const acf_string_t* message,
                                   const acf_string_t* source,
                                   int line,
                                   const acf_string_t* trace) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Unverified params: message, source, trace

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnConsoleMessage(
      AcfBrowserCToCpp::Wrap(browser), level, AcfString(message),
      AcfString(source), line, AcfString(trace));
}

void ACF_CALLBACK
browser_handler_on_loading_progress_change(struct _acf_browser_handler_t* self,
                                           acf_browser_t* browser,
                                           double progress) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadingProgressChange(
      AcfBrowserCToCpp::Wrap(browser), progress);
}

void ACF_CALLBACK
browser_handler_on_audio_state_change(struct _acf_browser_handler_t* self,
                                      acf_browser_t* browser,
                                      int audible) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnAudioStateChange(
      AcfBrowserCToCpp::Wrap(browser), audible ? true : false);
}

void ACF_CALLBACK
browser_handler_did_mute_state_update(struct _acf_browser_handler_t* self,
                                      acf_browser_t* browser,
                                      int muted) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->DidMuteStateUpdate(
      AcfBrowserCToCpp::Wrap(browser), muted ? true : false);
}

void ACF_CALLBACK
browser_handler_on_before_navigation(struct _acf_browser_handler_t* self,
                                     acf_browser_t* browser,
                                     struct _acf_frame_t* frame,
                                     struct _acf_request_t* request,
                                     int user_gesture,
                                     int is_redirect,
                                     struct _acf_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: browser; type: refptr_diff
  if (!browser)
    return;
  // Verify param: frame; type: refptr_diff
  if (!frame)
    return;
  // Verify param: request; type: refptr_diff
  if (!request)
    return;
  // Verify param: callback; type: refptr_diff
  if (!callback)
    return;

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBeforeNavigation(
      AcfBrowserCToCpp::Wrap(browser), AcfFrameCToCpp::Wrap(frame),
      AcfRequestCToCpp::Wrap(request), user_gesture ? true : false,
      is_redirect ? true : false, AcfCallbackCToCpp::Wrap(callback));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCppToC::AcfBrowserHandlerCppToC() {
  GetStruct()->on_browser_created = browser_handler_on_browser_created;
  GetStruct()->on_new_window_request = browser_handler_on_new_window_request;
  GetStruct()->on_browser_destroyed = browser_handler_on_browser_destroyed;
  GetStruct()->on_loading_state_changed =
      browser_handler_on_loading_state_changed;
  GetStruct()->on_navigation_state_changed =
      browser_handler_on_navigation_state_changed;
  GetStruct()->on_title_changed = browser_handler_on_title_changed;
  GetStruct()->on_address_changed = browser_handler_on_address_changed;
  GetStruct()->on_fullscreen_state_changed =
      browser_handler_on_fullscreen_state_changed;
  GetStruct()->on_auth_login_request = browser_handler_on_auth_login_request;
  GetStruct()->on_context_menu_request =
      browser_handler_on_context_menu_request;
  GetStruct()->on_context_menu_execute =
      browser_handler_on_context_menu_execute;
  GetStruct()->on_load_start = browser_handler_on_load_start;
  GetStruct()->on_load_end = browser_handler_on_load_end;
  GetStruct()->on_load_error = browser_handler_on_load_error;
  GetStruct()->on_favicon_urlchange = browser_handler_on_favicon_urlchange;
  GetStruct()->on_console_message = browser_handler_on_console_message;
  GetStruct()->on_loading_progress_change =
      browser_handler_on_loading_progress_change;
  GetStruct()->on_audio_state_change = browser_handler_on_audio_state_change;
  GetStruct()->did_mute_state_update = browser_handler_did_mute_state_update;
  GetStruct()->on_before_navigation = browser_handler_on_before_navigation;
}

// DESTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCppToC::~AcfBrowserHandlerCppToC() {}

template <>
AcfRefPtr<AcfBrowserHandler> AcfCppToCRefCounted<
    AcfBrowserHandlerCppToC,
    AcfBrowserHandler,
    acf_browser_handler_t>::UnwrapDerived(AcfWrapperType type,
                                          acf_browser_handler_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfBrowserHandlerCppToC,
                                   AcfBrowserHandler,
                                   acf_browser_handler_t>::kWrapperType =
    WT_BROWSER_HANDLER;
