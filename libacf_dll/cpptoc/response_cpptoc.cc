// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=43f31d4ad3d342aa5ec37d24750dbbde0aaef3ec$
//

#include "libacf_dll/cpptoc/response_cpptoc.h"
#include "libacf_dll/transfer_util.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK response_is_read_only(struct _acf_response_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfResponseCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

void ACF_CALLBACK response_set(struct _acf_response_t* self,
                               struct _acf_response_t* other) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: other

  // Execute
  AcfResponseCppToC::Get(self)->Set(AcfResponseCppToC::Unwrap(other));
}

int ACF_CALLBACK response_get_error(struct _acf_response_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  int _retval = AcfResponseCppToC::Get(self)->GetError();

  // Return type: simple
  return _retval;
}

void ACF_CALLBACK response_set_error(struct _acf_response_t* self, int error) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfResponseCppToC::Get(self)->SetError(error);
}

int ACF_CALLBACK response_get_status(struct _acf_response_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  int _retval = AcfResponseCppToC::Get(self)->GetStatus();

  // Return type: simple
  return _retval;
}

void ACF_CALLBACK response_set_status(struct _acf_response_t* self,
                                      int status) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfResponseCppToC::Get(self)->SetStatus(status);
}

acf_string_userfree_t ACF_CALLBACK
response_get_status_text(struct _acf_response_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfResponseCppToC::Get(self)->GetStatusText();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK response_set_status_text(struct _acf_response_t* self,
                                           const acf_string_t* statusText) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: statusText

  // Execute
  AcfResponseCppToC::Get(self)->SetStatusText(AcfString(statusText));
}

acf_string_userfree_t ACF_CALLBACK
response_get_mime_type(struct _acf_response_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfResponseCppToC::Get(self)->GetMimeType();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK response_set_mime_type(struct _acf_response_t* self,
                                         const acf_string_t* mimeType) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: mimeType

  // Execute
  AcfResponseCppToC::Get(self)->SetMimeType(AcfString(mimeType));
}

acf_string_userfree_t ACF_CALLBACK
response_get_charset(struct _acf_response_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfResponseCppToC::Get(self)->GetCharset();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK response_set_charset(struct _acf_response_t* self,
                                       const acf_string_t* charset) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: charset

  // Execute
  AcfResponseCppToC::Get(self)->SetCharset(AcfString(charset));
}

acf_string_userfree_t ACF_CALLBACK
response_get_header_by_name(struct _acf_response_t* self,
                            const acf_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;
  // Verify param: name; type: string_byref_const
  if (!name)
    return NULL;

  // Execute
  AcfString _retval =
      AcfResponseCppToC::Get(self)->GetHeaderByName(AcfString(name));

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK response_set_header_by_name(struct _acf_response_t* self,
                                              const acf_string_t* name,
                                              const acf_string_t* value,
                                              int overwrite) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: name; type: string_byref_const
  if (!name)
    return;
  // Unverified params: value

  // Execute
  AcfResponseCppToC::Get(self)->SetHeaderByName(
      AcfString(name), AcfString(value), overwrite ? true : false);
}

void ACF_CALLBACK response_get_header_map(struct _acf_response_t* self,
                                          acf_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: headerMap; type: string_map_multi_byref
  if (!headerMap)
    return;

  // Translate param: headerMap; type: string_map_multi_byref
  std::multimap<AcfString, AcfString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  AcfResponseCppToC::Get(self)->GetHeaderMap(headerMapMultimap);

  // Restore param: headerMap; type: string_map_multi_byref
  acf_string_multimap_clear(headerMap);
  transfer_string_multimap_contents(headerMapMultimap, headerMap);
}

void ACF_CALLBACK response_set_header_map(struct _acf_response_t* self,
                                          acf_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: headerMap; type: string_map_multi_byref_const
  if (!headerMap)
    return;

  // Translate param: headerMap; type: string_map_multi_byref_const
  std::multimap<AcfString, AcfString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  AcfResponseCppToC::Get(self)->SetHeaderMap(headerMapMultimap);
}

acf_string_userfree_t ACF_CALLBACK
response_get_url(struct _acf_response_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfResponseCppToC::Get(self)->GetURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK response_set_url(struct _acf_response_t* self,
                                   const acf_string_t* url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: url

  // Execute
  AcfResponseCppToC::Get(self)->SetURL(AcfString(url));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfResponseCppToC::AcfResponseCppToC() {
  GetStruct()->is_read_only = response_is_read_only;
  GetStruct()->set = response_set;
  GetStruct()->get_error = response_get_error;
  GetStruct()->set_error = response_set_error;
  GetStruct()->get_status = response_get_status;
  GetStruct()->set_status = response_set_status;
  GetStruct()->get_status_text = response_get_status_text;
  GetStruct()->set_status_text = response_set_status_text;
  GetStruct()->get_mime_type = response_get_mime_type;
  GetStruct()->set_mime_type = response_set_mime_type;
  GetStruct()->get_charset = response_get_charset;
  GetStruct()->set_charset = response_set_charset;
  GetStruct()->get_header_by_name = response_get_header_by_name;
  GetStruct()->set_header_by_name = response_set_header_by_name;
  GetStruct()->get_header_map = response_get_header_map;
  GetStruct()->set_header_map = response_set_header_map;
  GetStruct()->get_url = response_get_url;
  GetStruct()->set_url = response_set_url;
}

// DESTRUCTOR - Do not edit by hand.

AcfResponseCppToC::~AcfResponseCppToC() {}

template <>
AcfRefPtr<AcfResponse>
AcfCppToCRefCounted<AcfResponseCppToC, AcfResponse, acf_response_t>::
    UnwrapDerived(AcfWrapperType type, acf_response_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfResponseCppToC,
                                   AcfResponse,
                                   acf_response_t>::kWrapperType = WT_RESPONSE;
