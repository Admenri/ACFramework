// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=0a8455bab9a467933df982eaa0fcde0c4a13a36e$
//

#include "libacf_dll/cpptoc/list_value_cpptoc.h"
#include "libacf_dll/cpptoc/binary_value_cpptoc.h"
#include "libacf_dll/cpptoc/dictionary_value_cpptoc.h"
#include "libacf_dll/cpptoc/value_cpptoc.h"

// GLOBAL FUNCTIONS - Body may be edited by hand.

ACF_EXPORT acf_list_value_t* acf_list_value_create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  AcfRefPtr<AcfListValue> _retval = AcfListValue::Create();

  // Return type: refptr_same
  return AcfListValueCppToC::Wrap(_retval);
}

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK list_value_is_valid(struct _acf_list_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_is_owned(struct _acf_list_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->IsOwned();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_is_read_only(struct _acf_list_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_is_same(struct _acf_list_value_t* self,
                                    struct _acf_list_value_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  if (!that)
    return 0;

  // Execute
  bool _retval =
      AcfListValueCppToC::Get(self)->IsSame(AcfListValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_is_equal(struct _acf_list_value_t* self,
                                     struct _acf_list_value_t* that) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: that; type: refptr_same
  if (!that)
    return 0;

  // Execute
  bool _retval =
      AcfListValueCppToC::Get(self)->IsEqual(AcfListValueCppToC::Unwrap(that));

  // Return type: bool
  return _retval;
}

struct _acf_list_value_t* ACF_CALLBACK
list_value_copy(struct _acf_list_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfListValue> _retval = AcfListValueCppToC::Get(self)->Copy();

  // Return type: refptr_same
  return AcfListValueCppToC::Wrap(_retval);
}

int ACF_CALLBACK list_value_set_size(struct _acf_list_value_t* self,
                                     size_t size) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetSize(size);

  // Return type: bool
  return _retval;
}

size_t ACF_CALLBACK list_value_get_size(struct _acf_list_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  size_t _retval = AcfListValueCppToC::Get(self)->GetSize();

  // Return type: simple
  return _retval;
}

int ACF_CALLBACK list_value_clear(struct _acf_list_value_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->Clear();

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_remove(struct _acf_list_value_t* self,
                                   size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->Remove(index);

  // Return type: bool
  return _retval;
}

acf_value_type_t ACF_CALLBACK
list_value_get_type(struct _acf_list_value_t* self, size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return VTYPE_INVALID;

  // Execute
  acf_value_type_t _retval = AcfListValueCppToC::Get(self)->GetType(index);

  // Return type: simple
  return _retval;
}

acf_value_t* ACF_CALLBACK list_value_get_value(struct _acf_list_value_t* self,
                                               size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfValue> _retval = AcfListValueCppToC::Get(self)->GetValue(index);

  // Return type: refptr_same
  return AcfValueCppToC::Wrap(_retval);
}

int ACF_CALLBACK list_value_get_bool(struct _acf_list_value_t* self,
                                     size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->GetBool(index);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_get_int(struct _acf_list_value_t* self,
                                    size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  int _retval = AcfListValueCppToC::Get(self)->GetInt(index);

  // Return type: simple
  return _retval;
}

double ACF_CALLBACK list_value_get_double(struct _acf_list_value_t* self,
                                          size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  double _retval = AcfListValueCppToC::Get(self)->GetDouble(index);

  // Return type: simple
  return _retval;
}

acf_string_userfree_t ACF_CALLBACK
list_value_get_string(struct _acf_list_value_t* self, size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfListValueCppToC::Get(self)->GetString(index);

  // Return type: string
  return _retval.DetachToUserFree();
}

acf_binary_value_t* ACF_CALLBACK
list_value_get_binary(struct _acf_list_value_t* self, size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfBinaryValue> _retval =
      AcfListValueCppToC::Get(self)->GetBinary(index);

  // Return type: refptr_same
  return AcfBinaryValueCppToC::Wrap(_retval);
}

acf_dictionary_value_t* ACF_CALLBACK
list_value_get_dictionary(struct _acf_list_value_t* self, size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfDictionaryValue> _retval =
      AcfListValueCppToC::Get(self)->GetDictionary(index);

  // Return type: refptr_same
  return AcfDictionaryValueCppToC::Wrap(_retval);
}

struct _acf_list_value_t* ACF_CALLBACK
list_value_get_list(struct _acf_list_value_t* self, size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfListValue> _retval =
      AcfListValueCppToC::Get(self)->GetList(index);

  // Return type: refptr_same
  return AcfListValueCppToC::Wrap(_retval);
}

int ACF_CALLBACK list_value_set_value(struct _acf_list_value_t* self,
                                      size_t index,
                                      acf_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: value; type: refptr_same
  if (!value)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetValue(
      index, AcfValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_null(struct _acf_list_value_t* self,
                                     size_t index) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetNull(index);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_bool(struct _acf_list_value_t* self,
                                     size_t index,
                                     int value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval =
      AcfListValueCppToC::Get(self)->SetBool(index, value ? true : false);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_int(struct _acf_list_value_t* self,
                                    size_t index,
                                    int value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetInt(index, value);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_double(struct _acf_list_value_t* self,
                                       size_t index,
                                       double value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetDouble(index, value);

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_string(struct _acf_list_value_t* self,
                                       size_t index,
                                       const acf_string_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Unverified params: value

  // Execute
  bool _retval =
      AcfListValueCppToC::Get(self)->SetString(index, AcfString(value));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_binary(struct _acf_list_value_t* self,
                                       size_t index,
                                       acf_binary_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: value; type: refptr_same
  if (!value)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetBinary(
      index, AcfBinaryValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_dictionary(struct _acf_list_value_t* self,
                                           size_t index,
                                           acf_dictionary_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: value; type: refptr_same
  if (!value)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetDictionary(
      index, AcfDictionaryValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

int ACF_CALLBACK list_value_set_list(struct _acf_list_value_t* self,
                                     size_t index,
                                     struct _acf_list_value_t* value) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: value; type: refptr_same
  if (!value)
    return 0;

  // Execute
  bool _retval = AcfListValueCppToC::Get(self)->SetList(
      index, AcfListValueCppToC::Unwrap(value));

  // Return type: bool
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfListValueCppToC::AcfListValueCppToC() {
  GetStruct()->is_valid = list_value_is_valid;
  GetStruct()->is_owned = list_value_is_owned;
  GetStruct()->is_read_only = list_value_is_read_only;
  GetStruct()->is_same = list_value_is_same;
  GetStruct()->is_equal = list_value_is_equal;
  GetStruct()->copy = list_value_copy;
  GetStruct()->set_size = list_value_set_size;
  GetStruct()->get_size = list_value_get_size;
  GetStruct()->clear = list_value_clear;
  GetStruct()->remove = list_value_remove;
  GetStruct()->get_type = list_value_get_type;
  GetStruct()->get_value = list_value_get_value;
  GetStruct()->get_bool = list_value_get_bool;
  GetStruct()->get_int = list_value_get_int;
  GetStruct()->get_double = list_value_get_double;
  GetStruct()->get_string = list_value_get_string;
  GetStruct()->get_binary = list_value_get_binary;
  GetStruct()->get_dictionary = list_value_get_dictionary;
  GetStruct()->get_list = list_value_get_list;
  GetStruct()->set_value = list_value_set_value;
  GetStruct()->set_null = list_value_set_null;
  GetStruct()->set_bool = list_value_set_bool;
  GetStruct()->set_int = list_value_set_int;
  GetStruct()->set_double = list_value_set_double;
  GetStruct()->set_string = list_value_set_string;
  GetStruct()->set_binary = list_value_set_binary;
  GetStruct()->set_dictionary = list_value_set_dictionary;
  GetStruct()->set_list = list_value_set_list;
}

// DESTRUCTOR - Do not edit by hand.

AcfListValueCppToC::~AcfListValueCppToC() {}

template <>
AcfRefPtr<AcfListValue>
AcfCppToCRefCounted<AcfListValueCppToC, AcfListValue, acf_list_value_t>::
    UnwrapDerived(AcfWrapperType type, acf_list_value_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfListValueCppToC,
                                   AcfListValue,
                                   acf_list_value_t>::kWrapperType =
    WT_LIST_VALUE;
