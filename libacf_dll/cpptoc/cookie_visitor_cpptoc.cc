// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=7057c983899ac5944f6568b27b22a1ea65a69454$
//

#include "libacf_dll/cpptoc/cookie_visitor_cpptoc.h"
#include "libacf_dll/ctocpp/cookies_getter_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK cookie_visitor_visit(struct _acf_cookie_visitor_t* self,
                                       acf_cookies_getter_t* cookie_getter) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: cookie_getter; type: refptr_diff
  if (!cookie_getter)
    return;

  // Execute
  AcfCookieVisitorCppToC::Get(self)->Visit(
      AcfCookiesGetterCToCpp::Wrap(cookie_getter));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfCookieVisitorCppToC::AcfCookieVisitorCppToC() {
  GetStruct()->visit = cookie_visitor_visit;
}

// DESTRUCTOR - Do not edit by hand.

AcfCookieVisitorCppToC::~AcfCookieVisitorCppToC() {}

template <>
AcfRefPtr<AcfCookieVisitor> AcfCppToCRefCounted<
    AcfCookieVisitorCppToC,
    AcfCookieVisitor,
    acf_cookie_visitor_t>::UnwrapDerived(AcfWrapperType type,
                                         acf_cookie_visitor_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfCookieVisitorCppToC,
                                   AcfCookieVisitor,
                                   acf_cookie_visitor_t>::kWrapperType =
    WT_COOKIE_VISITOR;
