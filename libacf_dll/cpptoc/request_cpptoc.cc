// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=662ab16284f2e973b0425f98786ac6aef431957e$
//

#include "libacf_dll/cpptoc/request_cpptoc.h"
#include "libacf_dll/cpptoc/post_data_cpptoc.h"
#include "libacf_dll/transfer_util.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK request_is_read_only(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfRequestCppToC::Get(self)->IsReadOnly();

  // Return type: bool
  return _retval;
}

acf_string_userfree_t ACF_CALLBACK
request_get_url(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfRequestCppToC::Get(self)->GetURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK request_set_url(struct _acf_request_t* self,
                                  const acf_string_t* url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: url; type: string_byref_const
  if (!url)
    return;

  // Execute
  AcfRequestCppToC::Get(self)->SetURL(AcfString(url));
}

acf_string_userfree_t ACF_CALLBACK
request_get_method(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfRequestCppToC::Get(self)->GetMethod();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK request_set_method(struct _acf_request_t* self,
                                     const acf_string_t* method) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: method; type: string_byref_const
  if (!method)
    return;

  // Execute
  AcfRequestCppToC::Get(self)->SetMethod(AcfString(method));
}

void ACF_CALLBACK request_set_referrer(struct _acf_request_t* self,
                                       const acf_string_t* referrer_url,
                                       acf_referrer_policy_t policy) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: referrer_url

  // Execute
  AcfRequestCppToC::Get(self)->SetReferrer(AcfString(referrer_url), policy);
}

acf_string_userfree_t ACF_CALLBACK
request_get_referrer_url(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfRequestCppToC::Get(self)->GetReferrerURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

acf_referrer_policy_t ACF_CALLBACK
request_get_referrer_policy(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return REFERRER_POLICY_DEFAULT;

  // Execute
  acf_referrer_policy_t _retval =
      AcfRequestCppToC::Get(self)->GetReferrerPolicy();

  // Return type: simple
  return _retval;
}

struct _acf_post_data_t* ACF_CALLBACK
request_get_post_data(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfPostData> _retval = AcfRequestCppToC::Get(self)->GetPostData();

  // Return type: refptr_same
  return AcfPostDataCppToC::Wrap(_retval);
}

void ACF_CALLBACK request_set_post_data(struct _acf_request_t* self,
                                        struct _acf_post_data_t* postData) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: postData; type: refptr_same
  if (!postData)
    return;

  // Execute
  AcfRequestCppToC::Get(self)->SetPostData(AcfPostDataCppToC::Unwrap(postData));
}

void ACF_CALLBACK request_get_header_map(struct _acf_request_t* self,
                                         acf_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: headerMap; type: string_map_multi_byref
  if (!headerMap)
    return;

  // Translate param: headerMap; type: string_map_multi_byref
  std::multimap<AcfString, AcfString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  AcfRequestCppToC::Get(self)->GetHeaderMap(headerMapMultimap);

  // Restore param: headerMap; type: string_map_multi_byref
  acf_string_multimap_clear(headerMap);
  transfer_string_multimap_contents(headerMapMultimap, headerMap);
}

void ACF_CALLBACK request_set_header_map(struct _acf_request_t* self,
                                         acf_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: headerMap; type: string_map_multi_byref_const
  if (!headerMap)
    return;

  // Translate param: headerMap; type: string_map_multi_byref_const
  std::multimap<AcfString, AcfString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  AcfRequestCppToC::Get(self)->SetHeaderMap(headerMapMultimap);
}

acf_string_userfree_t ACF_CALLBACK
request_get_header_by_name(struct _acf_request_t* self,
                           const acf_string_t* name) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;
  // Verify param: name; type: string_byref_const
  if (!name)
    return NULL;

  // Execute
  AcfString _retval =
      AcfRequestCppToC::Get(self)->GetHeaderByName(AcfString(name));

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK request_set_header_by_name(struct _acf_request_t* self,
                                             const acf_string_t* name,
                                             const acf_string_t* value,
                                             int overwrite) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: name; type: string_byref_const
  if (!name)
    return;
  // Unverified params: value

  // Execute
  AcfRequestCppToC::Get(self)->SetHeaderByName(
      AcfString(name), AcfString(value), overwrite ? true : false);
}

void ACF_CALLBACK request_set(struct _acf_request_t* self,
                              const acf_string_t* url,
                              const acf_string_t* method,
                              struct _acf_post_data_t* postData,
                              acf_string_multimap_t headerMap) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: url; type: string_byref_const
  if (!url)
    return;
  // Verify param: method; type: string_byref_const
  if (!method)
    return;
  // Verify param: headerMap; type: string_map_multi_byref_const
  if (!headerMap)
    return;
  // Unverified params: postData

  // Translate param: headerMap; type: string_map_multi_byref_const
  std::multimap<AcfString, AcfString> headerMapMultimap;
  transfer_string_multimap_contents(headerMap, headerMapMultimap);

  // Execute
  AcfRequestCppToC::Get(self)->Set(AcfString(url), AcfString(method),
                                   AcfPostDataCppToC::Unwrap(postData),
                                   headerMapMultimap);
}

acf_resource_type_t ACF_CALLBACK
request_get_resource_type(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return RT_SUB_RESOURCE;

  // Execute
  acf_resource_type_t _retval = AcfRequestCppToC::Get(self)->GetResourceType();

  // Return type: simple
  return _retval;
}

acf_transition_type_t ACF_CALLBACK
request_get_transition_type(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return TT_EXPLICIT;

  // Execute
  acf_transition_type_t _retval =
      AcfRequestCppToC::Get(self)->GetTransitionType();

  // Return type: simple
  return _retval;
}

uint64 ACF_CALLBACK request_get_identifier(struct _acf_request_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  uint64 _retval = AcfRequestCppToC::Get(self)->GetIdentifier();

  // Return type: simple
  return _retval;
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfRequestCppToC::AcfRequestCppToC() {
  GetStruct()->is_read_only = request_is_read_only;
  GetStruct()->get_url = request_get_url;
  GetStruct()->set_url = request_set_url;
  GetStruct()->get_method = request_get_method;
  GetStruct()->set_method = request_set_method;
  GetStruct()->set_referrer = request_set_referrer;
  GetStruct()->get_referrer_url = request_get_referrer_url;
  GetStruct()->get_referrer_policy = request_get_referrer_policy;
  GetStruct()->get_post_data = request_get_post_data;
  GetStruct()->set_post_data = request_set_post_data;
  GetStruct()->get_header_map = request_get_header_map;
  GetStruct()->set_header_map = request_set_header_map;
  GetStruct()->get_header_by_name = request_get_header_by_name;
  GetStruct()->set_header_by_name = request_set_header_by_name;
  GetStruct()->set = request_set;
  GetStruct()->get_resource_type = request_get_resource_type;
  GetStruct()->get_transition_type = request_get_transition_type;
  GetStruct()->get_identifier = request_get_identifier;
}

// DESTRUCTOR - Do not edit by hand.

AcfRequestCppToC::~AcfRequestCppToC() {}

template <>
AcfRefPtr<AcfRequest>
AcfCppToCRefCounted<AcfRequestCppToC, AcfRequest, acf_request_t>::UnwrapDerived(
    AcfWrapperType type,
    acf_request_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfRequestCppToC,
                                   AcfRequest,
                                   acf_request_t>::kWrapperType = WT_REQUEST;
