// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d14b59b11d5ece6a92474b1f6768357b7608f66d$
//

#include "libacf_dll/cpptoc/resource_handler_cpptoc.h"
#include "libacf_dll/ctocpp/request_ctocpp.h"
#include "libacf_dll/ctocpp/resource_read_callback_ctocpp.h"
#include "libacf_dll/ctocpp/resource_skip_callback_ctocpp.h"
#include "libacf_dll/ctocpp/response_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK resource_handler_open(struct _acf_resource_handler_t* self,
                                       acf_request_t* request,
                                       int* handle_request) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: request; type: refptr_diff
  if (!request)
    return 0;
  // Verify param: handle_request; type: bool_byref
  if (!handle_request)
    return 0;

  // Translate param: handle_request; type: bool_byref
  bool handle_requestBool = (handle_request && *handle_request) ? true : false;

  // Execute
  bool _retval = AcfResourceHandlerCppToC::Get(self)->Open(
      AcfRequestCToCpp::Wrap(request), handle_requestBool);

  // Restore param: handle_request; type: bool_byref
  if (handle_request)
    *handle_request = handle_requestBool ? true : false;

  // Return type: bool
  return _retval;
}

void ACF_CALLBACK
resource_handler_get_response_headers(struct _acf_resource_handler_t* self,
                                      struct _acf_response_t* response,
                                      int64* response_length,
                                      acf_string_t* redirectUrl) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: response; type: refptr_diff
  if (!response)
    return;
  // Verify param: response_length; type: simple_byref
  if (!response_length)
    return;
  // Verify param: redirectUrl; type: string_byref
  if (!redirectUrl)
    return;

  // Translate param: response_length; type: simple_byref
  int64 response_lengthVal = response_length ? *response_length : 0;
  // Translate param: redirectUrl; type: string_byref
  AcfString redirectUrlStr(redirectUrl);

  // Execute
  AcfResourceHandlerCppToC::Get(self)->GetResponseHeaders(
      AcfResponseCToCpp::Wrap(response), response_lengthVal, redirectUrlStr);

  // Restore param: response_length; type: simple_byref
  if (response_length)
    *response_length = response_lengthVal;
}

void ACF_CALLBACK
resource_handler_skip(struct _acf_resource_handler_t* self,
                      int64 bytes_to_skip,
                      acf_resource_skip_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: callback; type: refptr_diff
  if (!callback)
    return;

  // Execute
  AcfResourceHandlerCppToC::Get(self)->Skip(
      bytes_to_skip, AcfResourceSkipCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK
resource_handler_read(struct _acf_resource_handler_t* self,
                      void* data_out,
                      int bytes_to_read,
                      acf_resource_read_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: data_out; type: simple_byaddr
  if (!data_out)
    return;
  // Verify param: callback; type: refptr_diff
  if (!callback)
    return;

  // Execute
  AcfResourceHandlerCppToC::Get(self)->Read(
      data_out, bytes_to_read, AcfResourceReadCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK
resource_handler_cancel(struct _acf_resource_handler_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfResourceHandlerCppToC::Get(self)->Cancel();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfResourceHandlerCppToC::AcfResourceHandlerCppToC() {
  GetStruct()->open = resource_handler_open;
  GetStruct()->get_response_headers = resource_handler_get_response_headers;
  GetStruct()->skip = resource_handler_skip;
  GetStruct()->read = resource_handler_read;
  GetStruct()->cancel = resource_handler_cancel;
}

// DESTRUCTOR - Do not edit by hand.

AcfResourceHandlerCppToC::~AcfResourceHandlerCppToC() {}

template <>
AcfRefPtr<AcfResourceHandler> AcfCppToCRefCounted<
    AcfResourceHandlerCppToC,
    AcfResourceHandler,
    acf_resource_handler_t>::UnwrapDerived(AcfWrapperType type,
                                           acf_resource_handler_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfResourceHandlerCppToC,
                                   AcfResourceHandler,
                                   acf_resource_handler_t>::kWrapperType =
    WT_RESOURCE_HANDLER;
