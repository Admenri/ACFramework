// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=99e7357c86b6f7f64bfc3859f1709d18635eb77e$
//

#include "libacf_dll/cpptoc/profile_cpptoc.h"
#include "libacf_dll/cpptoc/cookie_manager_cpptoc.h"
#include "libacf_dll/cpptoc/environment_cpptoc.h"
#include "libacf_dll/cpptoc/value_cpptoc.h"
#include "libacf_dll/ctocpp/complete_handler_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

acf_environment_t* ACF_CALLBACK
profile_get_environment(struct _acf_profile_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfEnvironment> _retval =
      AcfProfileCppToC::Get(self)->GetEnvironment();

  // Return type: refptr_same
  return AcfEnvironmentCppToC::Wrap(_retval);
}

int ACF_CALLBACK profile_is_valid(struct _acf_profile_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;

  // Execute
  bool _retval = AcfProfileCppToC::Get(self)->IsValid();

  // Return type: bool
  return _retval;
}

acf_string_userfree_t ACF_CALLBACK
profile_get_path(struct _acf_profile_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfProfileCppToC::Get(self)->GetPath();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK profile_set_preference(struct _acf_profile_t* self,
                                         const acf_string_t* name,
                                         struct _acf_value_t* value,
                                         acf_complete_handler_t* handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: name; type: string_byref_const
  if (!name)
    return;
  // Unverified params: value, handler

  // Execute
  AcfProfileCppToC::Get(self)->SetPreference(
      AcfString(name), AcfValueCppToC::Unwrap(value),
      AcfCompleteHandlerCToCpp::Wrap(handler));
}

void ACF_CALLBACK
profile_remove_browsing_data(struct _acf_profile_t* self,
                             acf_remove_data_type_t data_type,
                             int no_checks,
                             acf_complete_handler_t* handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: handler

  // Execute
  AcfProfileCppToC::Get(self)->RemoveBrowsingData(
      data_type, no_checks ? true : false,
      AcfCompleteHandlerCToCpp::Wrap(handler));
}

struct _acf_cookie_manager_t* ACF_CALLBACK
profile_get_cookie_manager(struct _acf_profile_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfCookieManager> _retval =
      AcfProfileCppToC::Get(self)->GetCookieManager();

  // Return type: refptr_same
  return AcfCookieManagerCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfProfileCppToC::AcfProfileCppToC() {
  GetStruct()->get_environment = profile_get_environment;
  GetStruct()->is_valid = profile_is_valid;
  GetStruct()->get_path = profile_get_path;
  GetStruct()->set_preference = profile_set_preference;
  GetStruct()->remove_browsing_data = profile_remove_browsing_data;
  GetStruct()->get_cookie_manager = profile_get_cookie_manager;
}

// DESTRUCTOR - Do not edit by hand.

AcfProfileCppToC::~AcfProfileCppToC() {}

template <>
AcfRefPtr<AcfProfile>
AcfCppToCRefCounted<AcfProfileCppToC, AcfProfile, acf_profile_t>::UnwrapDerived(
    AcfWrapperType type,
    acf_profile_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfProfileCppToC,
                                   AcfProfile,
                                   acf_profile_t>::kWrapperType = WT_PROFILE;
