// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=0e73addb4f3adad2276af6fea9df3c2f2f926e5e$
//

#include "libacf_dll/cpptoc/cookie_manager_cpptoc.h"
#include "libacf_dll/cpptoc/cookie_cpptoc.h"
#include "libacf_dll/cpptoc/profile_cpptoc.h"
#include "libacf_dll/ctocpp/complete_handler_ctocpp.h"
#include "libacf_dll/ctocpp/cookie_visitor_ctocpp.h"
#include "libacf_dll/ctocpp/number_complete_handler_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

acf_profile_t* ACF_CALLBACK
cookie_manager_get_profile(struct _acf_cookie_manager_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfRefPtr<AcfProfile> _retval =
      AcfCookieManagerCppToC::Get(self)->GetProfile();

  // Return type: refptr_same
  return AcfProfileCppToC::Wrap(_retval);
}

void ACF_CALLBACK cookie_manager_get_cookies(struct _acf_cookie_manager_t* self,
                                             const acf_string_t* url,
                                             int includeHttpOnly,
                                             acf_cookie_visitor_t* visitor) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: visitor; type: refptr_diff
  if (!visitor)
    return;
  // Unverified params: url

  // Execute
  AcfCookieManagerCppToC::Get(self)->GetCookies(
      AcfString(url), includeHttpOnly ? true : false,
      AcfCookieVisitorCToCpp::Wrap(visitor));
}

void ACF_CALLBACK cookie_manager_set_cookie(struct _acf_cookie_manager_t* self,
                                            const acf_string_t* url,
                                            acf_cookie_t* cookie,
                                            acf_complete_handler_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Verify param: url; type: string_byref_const
  if (!url)
    return;
  // Verify param: cookie; type: refptr_same
  if (!cookie)
    return;
  // Unverified params: callback

  // Execute
  AcfCookieManagerCppToC::Get(self)->SetCookie(
      AcfString(url), AcfCookieCppToC::Unwrap(cookie),
      AcfCompleteHandlerCToCpp::Wrap(callback));
}

void ACF_CALLBACK
cookie_manager_delete_cookies(struct _acf_cookie_manager_t* self,
                              const acf_string_t* url,
                              const acf_string_t* cookie_name,
                              acf_number_complete_handler_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: url, cookie_name, callback

  // Execute
  AcfCookieManagerCppToC::Get(self)->DeleteCookies(
      AcfString(url), AcfString(cookie_name),
      AcfNumberCompleteHandlerCToCpp::Wrap(callback));
}

void ACF_CALLBACK cookie_manager_flush_store(struct _acf_cookie_manager_t* self,
                                             acf_complete_handler_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;
  // Unverified params: callback

  // Execute
  AcfCookieManagerCppToC::Get(self)->FlushStore(
      AcfCompleteHandlerCToCpp::Wrap(callback));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfCookieManagerCppToC::AcfCookieManagerCppToC() {
  GetStruct()->get_profile = cookie_manager_get_profile;
  GetStruct()->get_cookies = cookie_manager_get_cookies;
  GetStruct()->set_cookie = cookie_manager_set_cookie;
  GetStruct()->delete_cookies = cookie_manager_delete_cookies;
  GetStruct()->flush_store = cookie_manager_flush_store;
}

// DESTRUCTOR - Do not edit by hand.

AcfCookieManagerCppToC::~AcfCookieManagerCppToC() {}

template <>
AcfRefPtr<AcfCookieManager> AcfCppToCRefCounted<
    AcfCookieManagerCppToC,
    AcfCookieManager,
    acf_cookie_manager_t>::UnwrapDerived(AcfWrapperType type,
                                         acf_cookie_manager_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfCookieManagerCppToC,
                                   AcfCookieManager,
                                   acf_cookie_manager_t>::kWrapperType =
    WT_COOKIE_MANAGER;
