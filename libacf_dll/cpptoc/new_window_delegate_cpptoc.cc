// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=19641bc673fb69c9a93d3e36848372cc3164f45d$
//

#include "libacf_dll/cpptoc/new_window_delegate_cpptoc.h"
#include "libacf_dll/cpptoc/browser_cpptoc.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

int ACF_CALLBACK
new_window_delegate_set_new_browser(struct _acf_new_window_delegate_t* self,
                                    acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return 0;
  // Verify param: browser; type: refptr_same
  if (!browser)
    return 0;

  // Execute
  bool _retval = AcfNewWindowDelegateCppToC::Get(self)->SetNewBrowser(
      AcfBrowserCppToC::Unwrap(browser));

  // Return type: bool
  return _retval;
}

acf_string_userfree_t ACF_CALLBACK
new_window_delegate_get_target_url(struct _acf_new_window_delegate_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return NULL;

  // Execute
  AcfString _retval = AcfNewWindowDelegateCppToC::Get(self)->GetTargetURL();

  // Return type: string
  return _retval.DetachToUserFree();
}

void ACF_CALLBACK
new_window_delegate_handle_request(struct _acf_new_window_delegate_t* self,
                                   int handled) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self)
    return;

  // Execute
  AcfNewWindowDelegateCppToC::Get(self)->HandleRequest(handled ? true : false);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfNewWindowDelegateCppToC::AcfNewWindowDelegateCppToC() {
  GetStruct()->set_new_browser = new_window_delegate_set_new_browser;
  GetStruct()->get_target_url = new_window_delegate_get_target_url;
  GetStruct()->handle_request = new_window_delegate_handle_request;
}

// DESTRUCTOR - Do not edit by hand.

AcfNewWindowDelegateCppToC::~AcfNewWindowDelegateCppToC() {}

template <>
AcfRefPtr<AcfNewWindowDelegate> AcfCppToCRefCounted<
    AcfNewWindowDelegateCppToC,
    AcfNewWindowDelegate,
    acf_new_window_delegate_t>::UnwrapDerived(AcfWrapperType type,
                                              acf_new_window_delegate_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfNewWindowDelegateCppToC,
                                   AcfNewWindowDelegate,
                                   acf_new_window_delegate_t>::kWrapperType =
    WT_NEW_WINDOW_DELEGATE;
