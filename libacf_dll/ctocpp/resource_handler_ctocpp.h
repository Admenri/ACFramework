// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=dba7d251c0c8397a0341a094fa7d0c5c5cb5e376$
//

#ifndef ACF_CTOCPP_RESOURCE_HANDLER_CTOCPP_H_
#define ACF_CTOCPP_RESOURCE_HANDLER_CTOCPP_H_
#pragma once

#include "include/acf_callback.h"
#include "include/acf_frame.h"
#include "include/acf_resource_request_handler.h"
#include "include/capi/acf_callback_capi.h"
#include "include/capi/acf_frame_capi.h"
#include "include/capi/acf_resource_request_handler_capi.h"
#include "libacf_dll/ctocpp/ctocpp_ref_counted.h"

// Wrap a C structure with a C++ class.
// This class may be instantiated and accessed DLL-side only.
class AcfResourceHandlerCToCpp
    : public AcfCToCppRefCounted<AcfResourceHandlerCToCpp,
                                 AcfResourceHandler,
                                 acf_resource_handler_t> {
 public:
  AcfResourceHandlerCToCpp();
  virtual ~AcfResourceHandlerCToCpp();

  // AcfResourceHandler methods.
  bool Open(AcfRefPtr<AcfRequest> request, bool& handle_request) override;
  void GetResponseHeaders(AcfRefPtr<AcfResponse> response,
                          int64& response_length,
                          AcfString& redirectUrl) override;
  void Skip(int64 bytes_to_skip,
            AcfRefPtr<AcfResourceSkipCallback> callback) override;
  void Read(void* data_out,
            int bytes_to_read,
            AcfRefPtr<AcfResourceReadCallback> callback) override;
  void Cancel() override;
};

#endif  // ACF_CTOCPP_RESOURCE_HANDLER_CTOCPP_H_
