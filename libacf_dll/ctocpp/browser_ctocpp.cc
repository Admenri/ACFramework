// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f629178047469578c1c64e067f03758365b97638$
//

#include "libacf_dll/ctocpp/browser_ctocpp.h"
#include "libacf_dll/cpptoc/browser_handler_cpptoc.h"
#include "libacf_dll/ctocpp/environment_ctocpp.h"
#include "libacf_dll/ctocpp/profile_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfBrowserCToCpp::IsSame(AcfRefPtr<AcfBrowser> that) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_same))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get())
    return false;

  // Execute
  int _retval = _struct->is_same(_struct, AcfBrowserCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfBrowserHandler> AcfBrowserCToCpp::GetHandler() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_handler))
    return nullptr;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_browser_handler_t* _retval = _struct->get_handler(_struct);

  // Return type: refptr_diff
  return AcfBrowserHandlerCppToC::Unwrap(_retval);
}

AcfUserData AcfBrowserCToCpp::GetUserData() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_user_data))
    return nullptr;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_user_data_t _retval = _struct->get_user_data(_struct);

  // Return type: simple
  return _retval;
}

AcfRefPtr<AcfEnvironment> AcfBrowserCToCpp::GetEnvironment() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_environment))
    return nullptr;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_environment_t* _retval = _struct->get_environment(_struct);

  // Return type: refptr_same
  return AcfEnvironmentCToCpp::Wrap(_retval);
}

void AcfBrowserCToCpp::Close(bool force) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, close))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->close(_struct, force);
}

AcfWindowHandle AcfBrowserCToCpp::GetWindowHandle() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_window_handle))
    return nullptr;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_window_handle_t _retval = _struct->get_window_handle(_struct);

  // Return type: simple
  return _retval;
}

bool AcfBrowserCToCpp::IsValid() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_valid))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfBrowserCToCpp::CanGoBack() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, can_go_back))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->can_go_back(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfBrowserCToCpp::CanGoForward() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, can_go_forward))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->can_go_forward(_struct);

  // Return type: bool
  return _retval ? true : false;
}

void AcfBrowserCToCpp::GoBack() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, go_back))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->go_back(_struct);
}

void AcfBrowserCToCpp::GoForward() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, go_forward))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->go_forward(_struct);
}

void AcfBrowserCToCpp::Reload(bool ignore_cache) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, reload))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->reload(_struct, ignore_cache);
}

void AcfBrowserCToCpp::Stop() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, stop))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->stop(_struct);
}

bool AcfBrowserCToCpp::IsLoading() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_loading))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_loading(_struct);

  // Return type: bool
  return _retval ? true : false;
}

void AcfBrowserCToCpp::LoadURL(const AcfString& url) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, load_url))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  if (url.empty())
    return;

  // Execute
  _struct->load_url(_struct, url.GetStruct());
}

AcfString AcfBrowserCToCpp::GetURL() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_url))
    return AcfString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_url(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfBrowserCToCpp::GetTitle() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_title))
    return AcfString();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_title(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfBrowserCToCpp::Focus() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, focus))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->focus(_struct);
}

void AcfBrowserCToCpp::SetVisible(bool visible) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_visible))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct, visible);
}

bool AcfBrowserCToCpp::GetVisible() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_visible))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_visible(_struct);

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfProfile> AcfBrowserCToCpp::GetProfile() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_profile))
    return nullptr;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_profile_t* _retval = _struct->get_profile(_struct);

  // Return type: refptr_same
  return AcfProfileCToCpp::Wrap(_retval);
}

// CONSTRUCTOR - Do not edit by hand.

AcfBrowserCToCpp::AcfBrowserCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfBrowserCToCpp::~AcfBrowserCToCpp() {}

template <>
acf_browser_t*
AcfCToCppRefCounted<AcfBrowserCToCpp, AcfBrowser, acf_browser_t>::UnwrapDerived(
    AcfWrapperType type,
    AcfBrowser* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfBrowserCToCpp,
                                   AcfBrowser,
                                   acf_browser_t>::kWrapperType = WT_BROWSER;
