// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=b22493faadb139d571bd08e0e85ada5ed3fac0b0$
//

#include "libacf_dll/ctocpp/browser_handler_ctocpp.h"
#include "libacf_dll/cpptoc/browser_cpptoc.h"
#include "libacf_dll/cpptoc/new_window_delegate_cpptoc.h"

// VIRTUAL METHODS - Body may be edited by hand.

void AcfBrowserHandlerCToCpp::OnBrowserCreated(AcfRefPtr<AcfBrowser> browser) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_browser_created))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;

  // Execute
  _struct->on_browser_created(_struct, AcfBrowserCppToC::Wrap(browser));
}

void AcfBrowserHandlerCToCpp::OnNewWindowRequest(
    AcfRefPtr<AcfBrowser> browser,
    NewWindowSource source,
    NewWindowDisposition disposition,
    bool user_gesture,
    AcfRefPtr<AcfNewWindowDelegate> delegate) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_new_window_request))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;
  // Verify param: delegate; type: refptr_diff
  if (!delegate.get())
    return;

  // Execute
  _struct->on_new_window_request(_struct, AcfBrowserCppToC::Wrap(browser),
                                 source, disposition, user_gesture,
                                 AcfNewWindowDelegateCppToC::Wrap(delegate));
}

void AcfBrowserHandlerCToCpp::OnBrowserDestroyed(
    AcfRefPtr<AcfBrowser> browser) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_browser_destroyed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;

  // Execute
  _struct->on_browser_destroyed(_struct, AcfBrowserCppToC::Wrap(browser));
}

void AcfBrowserHandlerCToCpp::OnLoadingStateChanged(
    AcfRefPtr<AcfBrowser> browser,
    bool show_loading_ui) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_loading_state_changed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;

  // Execute
  _struct->on_loading_state_changed(_struct, AcfBrowserCppToC::Wrap(browser),
                                    show_loading_ui);
}

void AcfBrowserHandlerCToCpp::OnNavigationStateChanged(
    AcfRefPtr<AcfBrowser> browser,
    NavigationTypes flags) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_navigation_state_changed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;

  // Execute
  _struct->on_navigation_state_changed(_struct, AcfBrowserCppToC::Wrap(browser),
                                       flags);
}

void AcfBrowserHandlerCToCpp::OnTitleChanged(AcfRefPtr<AcfBrowser> browser,
                                             const AcfString& title) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_title_changed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;
  // Verify param: title; type: string_byref_const
  if (title.empty())
    return;

  // Execute
  _struct->on_title_changed(_struct, AcfBrowserCppToC::Wrap(browser),
                            title.GetStruct());
}

void AcfBrowserHandlerCToCpp::OnAddressChanged(AcfRefPtr<AcfBrowser> browser,
                                               const AcfString& address) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_address_changed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;
  // Verify param: address; type: string_byref_const
  if (address.empty())
    return;

  // Execute
  _struct->on_address_changed(_struct, AcfBrowserCppToC::Wrap(browser),
                              address.GetStruct());
}

void AcfBrowserHandlerCToCpp::OnFullscreenStateChanged(
    AcfRefPtr<AcfBrowser> browser,
    bool fullscreen) {
  acf_browser_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, on_fullscreen_state_changed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  if (!browser.get())
    return;

  // Execute
  _struct->on_fullscreen_state_changed(_struct, AcfBrowserCppToC::Wrap(browser),
                                       fullscreen);
}

// CONSTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCToCpp::AcfBrowserHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCToCpp::~AcfBrowserHandlerCToCpp() {}

template <>
acf_browser_handler_t* AcfCToCppRefCounted<
    AcfBrowserHandlerCToCpp,
    AcfBrowserHandler,
    acf_browser_handler_t>::UnwrapDerived(AcfWrapperType type,
                                          AcfBrowserHandler* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfBrowserHandlerCToCpp,
                                   AcfBrowserHandler,
                                   acf_browser_handler_t>::kWrapperType =
    WT_BROWSER_HANDLER;
