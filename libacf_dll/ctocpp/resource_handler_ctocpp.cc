// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c5b7745fa7355adde522b68c9e19b248d886a965$
//

#include "libacf_dll/ctocpp/resource_handler_ctocpp.h"
#include "libacf_dll/cpptoc/request_cpptoc.h"
#include "libacf_dll/cpptoc/resource_read_callback_cpptoc.h"
#include "libacf_dll/cpptoc/resource_skip_callback_cpptoc.h"
#include "libacf_dll/cpptoc/response_cpptoc.h"

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfResourceHandlerCToCpp::Open(AcfRefPtr<AcfRequest> request,
                                    bool& handle_request) {
  acf_resource_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, open))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request; type: refptr_diff
  if (!request.get())
    return false;

  // Translate param: handle_request; type: bool_byref
  int handle_requestInt = handle_request;

  // Execute
  int _retval = _struct->open(_struct, AcfRequestCppToC::Wrap(request),
                              &handle_requestInt);

  // Restore param:handle_request; type: bool_byref
  handle_request = handle_requestInt ? true : false;

  // Return type: bool
  return _retval ? true : false;
}

void AcfResourceHandlerCToCpp::GetResponseHeaders(
    AcfRefPtr<AcfResponse> response,
    int64& response_length,
    AcfString& redirectUrl) {
  acf_resource_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_response_headers))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: response; type: refptr_diff
  if (!response.get())
    return;

  // Execute
  _struct->get_response_headers(_struct, AcfResponseCppToC::Wrap(response),
                                &response_length,
                                redirectUrl.GetWritableStruct());
}

void AcfResourceHandlerCToCpp::Skip(
    int64 bytes_to_skip,
    AcfRefPtr<AcfResourceSkipCallback> callback) {
  acf_resource_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, skip))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: callback; type: refptr_diff
  if (!callback.get())
    return;

  // Execute
  _struct->skip(_struct, bytes_to_skip,
                AcfResourceSkipCallbackCppToC::Wrap(callback));
}

void AcfResourceHandlerCToCpp::Read(
    void* data_out,
    int bytes_to_read,
    AcfRefPtr<AcfResourceReadCallback> callback) {
  acf_resource_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, read))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data_out; type: simple_byaddr
  if (!data_out)
    return;
  // Verify param: callback; type: refptr_diff
  if (!callback.get())
    return;

  // Execute
  _struct->read(_struct, data_out, bytes_to_read,
                AcfResourceReadCallbackCppToC::Wrap(callback));
}

void AcfResourceHandlerCToCpp::Cancel() {
  acf_resource_handler_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, cancel))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->cancel(_struct);
}

// CONSTRUCTOR - Do not edit by hand.

AcfResourceHandlerCToCpp::AcfResourceHandlerCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfResourceHandlerCToCpp::~AcfResourceHandlerCToCpp() {}

template <>
acf_resource_handler_t* AcfCToCppRefCounted<
    AcfResourceHandlerCToCpp,
    AcfResourceHandler,
    acf_resource_handler_t>::UnwrapDerived(AcfWrapperType type,
                                           AcfResourceHandler* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfResourceHandlerCToCpp,
                                   AcfResourceHandler,
                                   acf_resource_handler_t>::kWrapperType =
    WT_RESOURCE_HANDLER;
