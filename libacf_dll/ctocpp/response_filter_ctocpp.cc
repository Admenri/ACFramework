// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=654d22e52600c29d82c07b6b06eddad831e13fc6$
//

#include "libacf_dll/ctocpp/response_filter_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfResponseFilterCToCpp::InitFilter() {
  acf_response_filter_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, init_filter))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->init_filter(_struct);

  // Return type: bool
  return _retval ? true : false;
}

AcfResponseFilter::FilterStatus AcfResponseFilterCToCpp::Filter(
    void* data_in,
    size_t data_in_size,
    size_t& data_in_read,
    void* data_out,
    size_t data_out_size,
    size_t& data_out_written) {
  acf_response_filter_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, filter))
    return RESPONSE_FILTER_ERROR;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: data_out; type: simple_byaddr
  if (!data_out)
    return RESPONSE_FILTER_ERROR;
  // Unverified params: data_in

  // Execute
  acf_response_filter_status_t _retval =
      _struct->filter(_struct, data_in, data_in_size, &data_in_read, data_out,
                      data_out_size, &data_out_written);

  // Return type: simple
  return _retval;
}

// CONSTRUCTOR - Do not edit by hand.

AcfResponseFilterCToCpp::AcfResponseFilterCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfResponseFilterCToCpp::~AcfResponseFilterCToCpp() {}

template <>
acf_response_filter_t* AcfCToCppRefCounted<
    AcfResponseFilterCToCpp,
    AcfResponseFilter,
    acf_response_filter_t>::UnwrapDerived(AcfWrapperType type,
                                          AcfResponseFilter* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfResponseFilterCToCpp,
                                   AcfResponseFilter,
                                   acf_response_filter_t>::kWrapperType =
    WT_RESPONSE_FILTER;
