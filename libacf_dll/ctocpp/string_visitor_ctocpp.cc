// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=4bf1966751a0dc1a5d8d3dbe3e7a0146b40f7690$
//

#include "libacf_dll/ctocpp/string_visitor_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

void AcfStringVisitorCToCpp::Visit(const AcfString& string) {
  acf_string_visitor_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, visit))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: string

  // Execute
  _struct->visit(_struct, string.GetStruct());
}

// CONSTRUCTOR - Do not edit by hand.

AcfStringVisitorCToCpp::AcfStringVisitorCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfStringVisitorCToCpp::~AcfStringVisitorCToCpp() {}

template <>
acf_string_visitor_t*
AcfCToCppRefCounted<AcfStringVisitorCToCpp,
                    AcfStringVisitor,
                    acf_string_visitor_t>::UnwrapDerived(AcfWrapperType type,
                                                         AcfStringVisitor* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfStringVisitorCToCpp,
                                   AcfStringVisitor,
                                   acf_string_visitor_t>::kWrapperType =
    WT_STRING_VISITOR;
