// Copyright (c) 2023 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=70e58c712a31e6b19bfcb2355706adceae1f753a$
//

#include "libacf_dll/ctocpp/cookie_visitor_ctocpp.h"
#include "libacf_dll/cpptoc/cookies_getter_cpptoc.h"

// VIRTUAL METHODS - Body may be edited by hand.

void AcfCookieVisitorCToCpp::Visit(AcfRefPtr<AcfCookiesGetter> cookie_getter) {
  acf_cookie_visitor_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, visit))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: cookie_getter; type: refptr_diff
  if (!cookie_getter.get())
    return;

  // Execute
  _struct->visit(_struct, AcfCookiesGetterCppToC::Wrap(cookie_getter));
}

// CONSTRUCTOR - Do not edit by hand.

AcfCookieVisitorCToCpp::AcfCookieVisitorCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfCookieVisitorCToCpp::~AcfCookieVisitorCToCpp() {}

template <>
acf_cookie_visitor_t*
AcfCToCppRefCounted<AcfCookieVisitorCToCpp,
                    AcfCookieVisitor,
                    acf_cookie_visitor_t>::UnwrapDerived(AcfWrapperType type,
                                                         AcfCookieVisitor* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfCookieVisitorCToCpp,
                                   AcfCookieVisitor,
                                   acf_cookie_visitor_t>::kWrapperType =
    WT_COOKIE_VISITOR;
